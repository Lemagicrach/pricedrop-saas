{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["// middleware.ts\r\nimport { createMiddlewareClient } from '@supabase/ssr'\r\nimport { NextResponse } from 'next/server'\r\nimport type { NextRequest } from 'next/server'\r\n\r\n// Routes that require authentication\r\nconst protectedRoutes = [\r\n  '/dashboard',\r\n  '/products',\r\n  '/alerts',\r\n  '/analytics',\r\n  '/settings',\r\n  '/api/products',\r\n  '/api/alerts',\r\n]\r\n\r\n// Public routes that don't require auth\r\nconst publicRoutes = [\r\n  '/',\r\n  '/login',\r\n  '/signup',\r\n  '/pricing',\r\n  '/about',\r\n  '/contact',\r\n  '/api/demo',\r\n]\r\n\r\n// Admin routes\r\nconst adminRoutes = [\r\n  '/admin',\r\n]\r\n\r\nexport async function middleware(req: NextRequest) {\r\n  const res = NextResponse.next()\r\n  const supabase = createMiddlewareClient({ req, res })\r\n\r\n  // Check authentication status\r\n  const {\r\n    data: { session },\r\n  } = await supabase.auth.getSession()\r\n\r\n  const path = req.nextUrl.pathname\r\n\r\n  // Check if route is protected\r\n  const isProtectedRoute = protectedRoutes.some(route => path.startsWith(route))\r\n  const isPublicRoute = publicRoutes.some(route => path === route || path.startsWith(route))\r\n  const isAdminRoute = adminRoutes.some(route => path.startsWith(route))\r\n\r\n  // Redirect to login if accessing protected route without session\r\n  if (isProtectedRoute && !session) {\r\n    const redirectUrl = new URL('/login', req.url)\r\n    redirectUrl.searchParams.set('redirect', path)\r\n    return NextResponse.redirect(redirectUrl)\r\n  }\r\n\r\n  // Redirect to dashboard if accessing public auth routes while logged in\r\n  if ((path === '/login' || path === '/signup') && session) {\r\n    return NextResponse.redirect(new URL('/dashboard', req.url))\r\n  }\r\n\r\n  // Check admin access\r\n  if (isAdminRoute && session) {\r\n    const { data: profile } = await supabase\r\n      .from('user_profiles')\r\n      .select('role')\r\n      .eq('id', session.user.id)\r\n      .single()\r\n\r\n    if (profile?.role !== 'admin') {\r\n      return NextResponse.redirect(new URL('/dashboard', req.url))\r\n    }\r\n  }\r\n\r\n  // Rate limiting for API routes\r\n  if (path.startsWith('/api/') && !path.startsWith('/api/webhooks')) {\r\n    const rateLimit = await checkRateLimit(req)\r\n    \r\n    if (!rateLimit.allowed) {\r\n      return NextResponse.json(\r\n        { \r\n          error: 'Rate limit exceeded', \r\n          retryAfter: rateLimit.retryAfter \r\n        },\r\n        { \r\n          status: 429,\r\n          headers: {\r\n            'X-RateLimit-Limit': rateLimit.limit.toString(),\r\n            'X-RateLimit-Remaining': rateLimit.remaining.toString(),\r\n            'X-RateLimit-Reset': rateLimit.reset.toString(),\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  // Add security headers\r\n  const response = NextResponse.next()\r\n  \r\n  response.headers.set('X-Frame-Options', 'DENY')\r\n  response.headers.set('X-Content-Type-Options', 'nosniff')\r\n  response.headers.set('Referrer-Policy', 'origin-when-cross-origin')\r\n  response.headers.set(\r\n    'Permissions-Policy',\r\n    'camera=(), microphone=(), geolocation=()'\r\n  )\r\n\r\n  return response\r\n}\r\n\r\n/**\r\n * Simple in-memory rate limiter\r\n * For production, use Redis with Upstash or similar\r\n */\r\ninterface RateLimitResult {\r\n  allowed: boolean\r\n  limit: number\r\n  remaining: number\r\n  reset: number\r\n  retryAfter?: number\r\n}\r\n\r\nconst rateLimitStore = new Map<string, { count: number; resetAt: number }>()\r\n\r\nasync function checkRateLimit(req: NextRequest): Promise<RateLimitResult> {\r\n  // Get identifier (IP or user ID)\r\n  const ip = req.ip || req.headers.get('x-forwarded-for') || 'unknown'\r\n  const key = `rate_limit:${ip}`\r\n  \r\n  const now = Date.now()\r\n  const windowMs = 60 * 1000 // 1 minute\r\n  const maxRequests = 100 // 100 requests per minute\r\n\r\n  // Clean up expired entries\r\n  for (const [k, v] of rateLimitStore.entries()) {\r\n    if (v.resetAt < now) {\r\n      rateLimitStore.delete(k)\r\n    }\r\n  }\r\n\r\n  // Get or create rate limit entry\r\n  let entry = rateLimitStore.get(key)\r\n  \r\n  if (!entry || entry.resetAt < now) {\r\n    entry = { count: 0, resetAt: now + windowMs }\r\n    rateLimitStore.set(key, entry)\r\n  }\r\n\r\n  entry.count++\r\n\r\n  const remaining = Math.max(0, maxRequests - entry.count)\r\n  const allowed = entry.count <= maxRequests\r\n\r\n  return {\r\n    allowed,\r\n    limit: maxRequests,\r\n    remaining,\r\n    reset: entry.resetAt,\r\n    retryAfter: allowed ? undefined : Math.ceil((entry.resetAt - now) / 1000),\r\n  }\r\n}\r\n\r\n// Specify which routes this middleware should run on\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except for the ones starting with:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * - public folder\r\n     */\r\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\r\n  ],\r\n}"],"names":[],"mappings":"AAAA,gBAAgB;;;;;;;AAChB;AAAA;AACA;AAAA;;;AAGA,qCAAqC;AACrC,MAAM,kBAAkB;IACtB;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,wCAAwC;AACxC,MAAM,eAAe;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,eAAe;AACf,MAAM,cAAc;IAClB;CACD;AAEM,eAAe,WAAW,GAAgB;IAC/C,MAAM,MAAM,gMAAY,CAAC,IAAI;IAC7B,MAAM,WAAW,IAAA,8LAAsB,EAAC;QAAE;QAAK;IAAI;IAEnD,8BAA8B;IAC9B,MAAM,EACJ,MAAM,EAAE,OAAO,EAAE,EAClB,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;IAElC,MAAM,OAAO,IAAI,OAAO,CAAC,QAAQ;IAEjC,8BAA8B;IAC9B,MAAM,mBAAmB,gBAAgB,IAAI,CAAC,CAAA,QAAS,KAAK,UAAU,CAAC;IACvE,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAA,QAAS,SAAS,SAAS,KAAK,UAAU,CAAC;IACnF,MAAM,eAAe,YAAY,IAAI,CAAC,CAAA,QAAS,KAAK,UAAU,CAAC;IAE/D,iEAAiE;IACjE,IAAI,oBAAoB,CAAC,SAAS;QAChC,MAAM,cAAc,IAAI,IAAI,UAAU,IAAI,GAAG;QAC7C,YAAY,YAAY,CAAC,GAAG,CAAC,YAAY;QACzC,OAAO,gMAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,wEAAwE;IACxE,IAAI,CAAC,SAAS,YAAY,SAAS,SAAS,KAAK,SAAS;QACxD,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,IAAI,GAAG;IAC5D;IAEA,qBAAqB;IACrB,IAAI,gBAAgB,SAAS;QAC3B,MAAM,EAAE,MAAM,OAAO,EAAE,GAAG,MAAM,SAC7B,IAAI,CAAC,iBACL,MAAM,CAAC,QACP,EAAE,CAAC,MAAM,QAAQ,IAAI,CAAC,EAAE,EACxB,MAAM;QAET,IAAI,SAAS,SAAS,SAAS;YAC7B,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,IAAI,GAAG;QAC5D;IACF;IAEA,+BAA+B;IAC/B,IAAI,KAAK,UAAU,CAAC,YAAY,CAAC,KAAK,UAAU,CAAC,kBAAkB;QACjE,MAAM,YAAY,MAAM,eAAe;QAEvC,IAAI,CAAC,UAAU,OAAO,EAAE;YACtB,OAAO,gMAAY,CAAC,IAAI,CACtB;gBACE,OAAO;gBACP,YAAY,UAAU,UAAU;YAClC,GACA;gBACE,QAAQ;gBACR,SAAS;oBACP,qBAAqB,UAAU,KAAK,CAAC,QAAQ;oBAC7C,yBAAyB,UAAU,SAAS,CAAC,QAAQ;oBACrD,qBAAqB,UAAU,KAAK,CAAC,QAAQ;gBAC/C;YACF;QAEJ;IACF;IAEA,uBAAuB;IACvB,MAAM,WAAW,gMAAY,CAAC,IAAI;IAElC,SAAS,OAAO,CAAC,GAAG,CAAC,mBAAmB;IACxC,SAAS,OAAO,CAAC,GAAG,CAAC,0BAA0B;IAC/C,SAAS,OAAO,CAAC,GAAG,CAAC,mBAAmB;IACxC,SAAS,OAAO,CAAC,GAAG,CAClB,sBACA;IAGF,OAAO;AACT;AAcA,MAAM,iBAAiB,IAAI;AAE3B,eAAe,eAAe,GAAgB;IAC5C,iCAAiC;IACjC,MAAM,KAAK,IAAI,EAAE,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,sBAAsB;IAC3D,MAAM,MAAM,CAAC,WAAW,EAAE,IAAI;IAE9B,MAAM,MAAM,KAAK,GAAG;IACpB,MAAM,WAAW,KAAK,KAAK,WAAW;;IACtC,MAAM,cAAc,IAAI,0BAA0B;;IAElD,2BAA2B;IAC3B,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,eAAe,OAAO,GAAI;QAC7C,IAAI,EAAE,OAAO,GAAG,KAAK;YACnB,eAAe,MAAM,CAAC;QACxB;IACF;IAEA,iCAAiC;IACjC,IAAI,QAAQ,eAAe,GAAG,CAAC;IAE/B,IAAI,CAAC,SAAS,MAAM,OAAO,GAAG,KAAK;QACjC,QAAQ;YAAE,OAAO;YAAG,SAAS,MAAM;QAAS;QAC5C,eAAe,GAAG,CAAC,KAAK;IAC1B;IAEA,MAAM,KAAK;IAEX,MAAM,YAAY,KAAK,GAAG,CAAC,GAAG,cAAc,MAAM,KAAK;IACvD,MAAM,UAAU,MAAM,KAAK,IAAI;IAE/B,OAAO;QACL;QACA,OAAO;QACP;QACA,OAAO,MAAM,OAAO;QACpB,YAAY,UAAU,YAAY,KAAK,IAAI,CAAC,CAAC,MAAM,OAAO,GAAG,GAAG,IAAI;IACtE;AACF;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}